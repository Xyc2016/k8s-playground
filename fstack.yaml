apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: fstack-be
spec:
  selector:
    matchLabels:
      app: fstack-be
  replicas: 2
  template:
    metadata:
      labels:
        app: fstack-be
      annotations:
        prometheus.io/scrape: "true"    # 允许 Prometheus 抓取
        prometheus.io/path: "/metrics"  # 指标路径（默认是 /metrics，可省略）
        prometheus.io/port: "8000"      # 指标暴露的端口
    spec:
      containers:
      - name: fstack-be
        image: 192.168.49.2:5000/fstack-be:latest
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 200m
            memory: 200Mi
        ports:
        - containerPort: 8000
        readinessProbe:
          httpGet:
            path: /metrics
            port: 8000
          initialDelaySeconds: 1
          periodSeconds: 1
          timeoutSeconds: 2
          failureThreshold: 5
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /metrics
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 20
          timeoutSeconds: 2
          failureThreshold: 3
          successThreshold: 1
---
apiVersion: v1
kind: Service
metadata:
  name: fstack-be
  annotations:
    # 最关键的两个注解：开启抓取并指定端口
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"  # 必须修改：这是您 Flask App 内部暴露 metrics 的端口
    # 可选注解：如果您的 metrics 路径不是 /metrics，需要指定
    prometheus.io/path: "/metrics"
  labels:
    app: fstack-be
spec:
  ports:
  - port: 8000
    targetPort: 8000
  selector:
    app: fstack-be
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf-configmap
data:
  default.conf: |
    access_log /dev/stdout;
    error_log /dev/stderr;

    server {
        listen 80;
        server_name localhost;

        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        location /api {
            proxy_pass http://fstack-be:8000; # Forward requests to Gunicorn
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /static/ {
            alias /usr/share/nginx/html/static/;
            # 设置一年缓存，并标记为不可变
            expires 1y;
            add_header Cache-Control "public, immutable";
        }

        # 处理所有其他请求（如 index.html）：不缓存或短期缓存
        location / {
            alias /usr/share/nginx/html/;
            # 核心设置：确保 HTML 文件不被浏览器缓存
            add_header Cache-Control "no-cache, must-revalidate";
        }
    }
---
apiVersion: apps/v1 #  for k8s versions before 1.9.0 use apps/v1beta2  and before 1.8.0 use extensions/v1beta1
kind: Deployment
metadata:
  name: fstack-fe
spec:
  selector:
    matchLabels:
      app: fstack-fe
  replicas: 2
  template:
    metadata:
      labels:
        app: fstack-fe
    spec:
      volumes:
        - name: nginx-config-volume
          configMap:
            name: nginx-conf-configmap

      containers:

      - name: fstack-fe
        image: 192.168.49.2:5000/fstack-fe:latest
        volumeMounts:
          - name: nginx-config-volume
            mountPath: /etc/nginx/conf.d/
        resources:
          requests:
            cpu: 50m  # Nginx 通常需要较少 CPU
            memory: 50Mi
          limits:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 80
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 2
          periodSeconds: 1
          timeoutSeconds: 2
          failureThreshold: 5
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 20
          timeoutSeconds: 2
          failureThreshold: 3
          successThreshold: 1
---
apiVersion: v1
kind: Service
metadata:
  name: fstack-fe
  labels:
    app: fstack-fe
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: fstack-fe
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: fstack-ingress
  annotations:
    # 可选：如果您需要更复杂的重写规则，可以使用这些注解
    # nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  tls: # 添加 TLS 配置
  - hosts:
    - fstack.local
    secretName: fstack-local-tls # 指向刚才创建的 Secret
  rules:
  # 定义规则1：使用自定义域名（需要通过hosts文件解析）
  - host: fstack.local # 您喜欢的任何域名
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fstack-fe  # 指向您的前端 Service
            port:
              number: 80   # 前端 Service 的端口
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: fstack-be  # 指向您的后端 Service
            port:
              number: 8000   # 后端 Service 的端口
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: "redis"
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        command: ["redis-server", "--appendonly", "yes"]
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
  clusterIP: None  # Headless Service，保证网络标识稳定
  selector:
    app: redis